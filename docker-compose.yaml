version: "2"

services:
  # The REST application service
  rest-app:
    build: ./rest-app  # Path to the Dockerfile for the REST application
    ports:
      - "8008:8008"  # Maps port 8008 on the host to port 8008 in the container
    environment:
      PORT: 8008  # Environment variable for the application port
    networks:
      - net  # Connects to the custom network 'net'

  # The OpenTelemetry collector service
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest  # Collector image
    command: ["--config=/etc/otel-collector-config.yaml"]  # Collector configuration
    volumes:
      - ./collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml  # Mounts configuration file
    ports:
      - "1888:1888"  # pprof extension
      - "8888:8888"  # Prometheus metrics exposed by the collector
      - "8889:8889"  # Prometheus exporter metrics
      - "13133:13133"  # health_check extension
      - "4317:4317"  # OTLP gRPC receiver
      - "55679:55679"  # zpages extension
      - "4318:4318"  # OTLP HTTP receiver
    networks:
      - net  # Connects to the custom network 'net'
      
  # The Prometheus service
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0  # Prometheus image
    command: --config.file=/etc/prometheus/prometheus.yml --no-scrape.adjust-timestamps
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml  # Prometheus configuration file
    ports:
      - "9090:9090"  # Maps port 9090 on the host to port 9090 in the container
    networks:
      - net  # Connects to the custom network 'net'

  # The Grafana service
  grafana:
    image: grafana/grafana:9.0.1  # Grafana image
    container_name: grafana  # Container name for Grafana
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini  # Grafana configuration file
      - ./grafana/provisioning/:/etc/grafana/provisioning/  # Grafana provisioning files
    ports:
      - "3000:3000"  # Maps port 3000 on the host to port 3000 in the container
    networks:
      - net  # Connects to the custom network 'net'

networks:
  net:
    driver: bridge  # Defines a custom bridge network 'net'
